
// ----------------------------- main.adept -----------------------------
// A simple Tic-Tac-Toe game written in Adept 2.0
// ----------------------------------------------------------------------

pragma compiler_version '2.0'
pragma project_name 'AdeptTicTacToe'

import 'sys/cstdio.adept'
import 'sys/cstring.adept'

PLACE_FREE   == '_'ub
PLACE_CIRCLE == 'o'ub
PLACE_CROSS  == 'x'ub

func main(in argc int, in argv **ubyte) int {
    player int = 1
    winner int = 0

    // The Tic-Tac-Toe Board
    board *ubyte = new ubyte * 9
    defer delete board

    memset(board, PLACE_FREE, sizeof ubyte * 9)

    while winner == 0 {
        printBoard(board)

        x, y int // The place to place a new marker
        requestPlace(board, player, &x, &y)

        marker ubyte = PLACE_CROSS
        if player == 2, marker = PLACE_CIRCLE

        // Place the player's marker on the board
        board[(y - 1) * 3 + x - 1] = marker

        // 8 possible ways to win
        if      won(board, marker, 0, 1, 2), winner = player
        else if won(board, marker, 3, 4, 5), winner = player
        else if won(board, marker, 6, 7, 8), winner = player
        else if won(board, marker, 0, 3, 6), winner = player
        else if won(board, marker, 1, 4, 7), winner = player
        else if won(board, marker, 2, 5, 8), winner = player
        else if won(board, marker, 0, 4, 8), winner = player
        else if won(board, marker, 6, 4, 2), winner = player

        // Check if someone was declared the winner
        if winner != 0 {
            printf('\nPlayer %d wins!\n', winner)

            if askPlayAgain(board, &winner, &player), continue
            else return 0
        }

        // Check for stalemate
        if boardCompletelyFull(board) and winner == 0 {
            printf('\nGame resulted in statemate!\n')

            if askPlayAgain(board, &winner, &player), continue
            else return 0
        }

        switchPlayer(&player)
    }

    return 0
}

func switchPlayer(inout player *int) void {
    // Switchs between player 1 and player 2
    *player = cast int !(*player - 1) + 1
}

func requestPlace(in board *ubyte, in player int, out x *int, out y *int) void {
    until break valid_placement { // Until we have a place that isn't taken
        requestCoord(x, 'x', player)
        requestCoord(y, 'y', player)

        // If that place on the board is free, then break because we found a valid spot
        if board[(*y - 1) * 3 + *x - 1] == PLACE_FREE, break valid_placement

        // Ignore garbage user-input
        while cast ubyte getchar() != '\n'ub {}

        // That spot is taken, so try again
        printf('That spot is taken, enter different coordinates\n')
    }
}

func requestCoord(out coord *int, in coordName *ubyte, in player int) void {
    until break have_valid_coord { // Until we have a valid coordinate
        printf('\nEnter %s coordinate for player %d (ranging from 1-3): ', coordName, player)

        // Get the coordinate
        scanf('%d', coord)

        // If the coordinate isn't out of range, then we have a valid coordinate
        unless *coord < 1 || *coord > 3, break have_valid_coord

        // Ignore garbage user-input
        while cast ubyte getchar() != '\n'ub {}

        // That coordinate is invalid so try again
        printf('Number must be within range 1 to 3\n')
    }
}

func askPlayAgain(inout board *ubyte, out winner *int, out player *int) bool {
    // Print the board which contains the winning move
    printBoard(board)

    // Ask if they want to play again
    printf('\nDo you want to play again? (y|n): ')
    getchar() // Pass over entered newline character

    if getchar() == 'y'ub {
        // Reset the winner & player
        *winner = 0; *player = 1

        // Free all the places on the board
        memset(board, PLACE_FREE, sizeof ubyte * 9)

        return true // Play again
    }

    return false
}

func won(board *ubyte, marker ubyte, a int, b int, c int) bool {
    // Check three positions that constitute a win
    return board[a] == marker && board[b] == marker && board[c] == marker
}

func boardCompletelyFull(in board *ubyte) bool {
    // Check to see if the board is completely full
    i usize = 0; while i != 9 {
        if board[i] == PLACE_FREE, return false
        i += 1
    }
    return true
}

func printBoard(board *ubyte) void {
    // Print the board to standard output
    printf('%c  %c  %c\n%c  %c  %c\n%c  %c  %c\n', board[0], board[1], board[2],
        board[3], board[4], board[5], board[6], board[7], board[8])
}
